# automatically generated by the FlatBuffers compiler, do not modify

# namespace: results

import flatbuffers

# /// All results.
class Results(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsResults(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Results()
        x.Init(buf, n + offset)
        return x

    # Results
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// Parameters used during execution.
    # Results
    def Params(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Params import Params
            obj = Params()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// Statistics for each iteration.
    # Results
    def Iterations(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Iteration import Iteration
            obj = Iteration()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Results
    def IterationsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ResultsStart(builder): builder.StartObject(2)
def ResultsAddParams(builder, params): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(params), 0)
def ResultsAddIterations(builder, iterations): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(iterations), 0)
def ResultsStartIterationsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ResultsEnd(builder): return builder.EndObject()
