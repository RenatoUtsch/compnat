/*
 * Copyright 2017 Renato Utsch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef COMPNAT_TP1_STATISTICS_HPP
#define COMPNAT_TP1_STATISTICS_HPP

#include <cmath>
#include <string>
#include <unordered_set>
#include <vector>

#include <glog/logging.h>

#include "representation.hpp"
#include "threading.hpp"
#include "utils.hpp"

namespace stats {

/**
 * Calculates the fitness of an individual given a set of input data.
 * This is implemented as the Root-mean-square deviation.
 * @param individual The individual used when calculating the fitness.
 * @param size The size of the individual.
 * @param dataset Dataset to use to calculate the fitness.
 * @return A pair of the fitness and the RMSE.
 */
template <typename T, class RNG>
double fitness(const Node<T, RNG> &individual, const Dataset<T> &dataset) {
  double error = 0;
  for (const auto &sample : dataset) {
    // Unpack outside the loop because clang on MacOS can't compile it in the
    // loop.
    const auto & [ input, expected ] = sample;
    error += std::pow(individual.eval(input) - expected, 2);
  }

  return std::sqrt(error / dataset.size());
}

/**
 * Calculates the fitness for all population and returns it in a vector.
 * This is implemented as the Root-mean-square deviation.
 * @param pool Thread pool.
 * @param population The population used when calculating the fitness.
 * @param sizes The size of each individual in the population.
 * @param dataset The dataset used to calculate the fitness.
 * @return Vector of fitness.
 */
template <typename T, class RNG>
std::vector<double> fitness(threading::ThreadPool &pool,
                            const std::vector<Node<T, RNG>> &population,
                            const Dataset<T> &dataset) {
  std::vector<double> results(population.size());
  pool.run(0, population.size(), [&results, &population, &dataset](size_t i) {
    results[i] = fitness(population[i], dataset);
  });

  return results;
}

/**
 * Calculates the size for all the population.
 */
template <typename T, class RNG>
std::vector<size_t> sizes(const std::vector<Node<T, RNG>> &population) {
  std::vector<size_t> sizes(population.size());
  for (size_t i = 0; i < population.size(); ++i) {
    sizes[i] = population[i].size();
  }

  return sizes;
}

/// Per-generation improvement stats.
struct ImprovementMetadata {
  /// Vector containing pair of individual index and average fitness of the
  /// parents for all individuals generated through crossover.
  std::vector<std::pair<size_t, double>> crossoverAvgParentFitness;

  /// Vector containing pair of individual index and fitness of the parent for
  /// all individuals generated through mutation.
  std::vector<std::pair<size_t, double>> mutationParentFitness;
};

/**
 * Stores the statistics of each generation.
 */
template <typename T, class RNG> struct Statistics {
  /// Fitness of all individuals in the generation.
  std::vector<double> fitness;

  /// Sizes of all individuals in the generation.
  std::vector<size_t> sizes;

  /// Index of the best individual in the generation.
  size_t best;

  /// Index of the worst individual in the generation.
  size_t worst;

  /// Average fitness of the generation.
  T averageFitness;

  /// Average individual size.
  size_t averageSize;

  /// Number of repeated individuals in the generation.
  size_t numRepeatedIndividuals;

  /// Number of individuals generated by crossover better than their parents.
  size_t numCrossoverBetter;

  /// Number of individuals generated by crossover worse than their parents.
  size_t numCrossoverWorse;

  /// Number of individuals generated by mutation better than their parent.
  size_t numMutationBetter;

  /// Number of individuals generated by mutation worse than their parent.
  size_t numMutationWorse;

  /// String representation of the best individual.
  std::string bestStr;

  Statistics(threading::ThreadPool &pool,
             const std::vector<Node<T, RNG>> &population,
             const Dataset<T> &dataset,
             const ImprovementMetadata &metadata = {})
      : fitness(::stats::fitness(pool, population, dataset)),
        sizes(::stats::sizes(population)), best(0), worst(0), averageFitness(0),
        averageSize(0), numRepeatedIndividuals(0), numCrossoverBetter(0),
        numCrossoverWorse(0), numMutationBetter(0), numMutationWorse(0) {

    calcFitnessStats_();
    calcRepeatedIndividuals_();
    calcAverageSize_();
    calcImprovementStats_(metadata);

    bestStr = population[best].str();

    printStats_(metadata);
  }

private:
  /// best, worst, averageFitness.
  void calcFitnessStats_() {
    for (size_t i = 0; i < fitness.size(); ++i) {
      if (fitness[best] > fitness[i]) {
        best = i;
      }
      if (fitness[worst] < fitness[i]) {
        worst = i;
      }
      averageFitness += fitness[i];
    }
    averageFitness /= fitness.size();
  }

  /// numRepeatedIndividuals.
  void calcRepeatedIndividuals_() {
    std::unordered_set<T> set;
    for (const auto &fit : fitness) {
      if (set.count(fit)) {
        ++numRepeatedIndividuals;
      } else {
        set.insert(fit);
      }
    }
  }

  void calcAverageSize_() {
    for (auto size : sizes) {
      averageSize += size;
    }
    averageSize /= sizes.size();
  }

  // num[Crossover/Mutation]Better, num[Crossover/Mutation]Worse.
  void calcImprovementStats_(const ImprovementMetadata &metadata) {
    calcFitnessImprovement_(metadata.crossoverAvgParentFitness,
                            numCrossoverBetter, numCrossoverWorse);
    calcFitnessImprovement_(metadata.mutationParentFitness, numMutationBetter,
                            numMutationWorse);
  }

  void calcFitnessImprovement_(
      const std::vector<std::pair<size_t, double>> &fitnesses, size_t &better,
      size_t &worse) {
    for (const auto &p : fitnesses) {
      const auto & [ childIndex, parentFitness ] = p;
      if (fitness[childIndex] < parentFitness) {
        ++better;
      } else if (fitness[childIndex] > parentFitness) {
        ++worse;
      }
    }
  }

  void printStats_(const ImprovementMetadata &metadata) {
    using utils::paddedStrCat;
    const size_t w = 30; // Width of each padded string.

    LOG(INFO) << paddedStrCat(w, "  best fitness: ", fitness[best])
              << paddedStrCat(w, "| best size: ", sizes[best])
              << paddedStrCat(w, "| worst fitness: ", fitness[worst])
              << paddedStrCat(w, "| worst size: ", sizes[worst]);
    LOG(INFO) << paddedStrCat(w, "  avgFitness: ", averageFitness)
              << paddedStrCat(w, "| avgSize: ", averageSize)
              << paddedStrCat(w, "| numRepeated: ", numRepeatedIndividuals);

    if (!metadata.crossoverAvgParentFitness.empty() &&
        !metadata.mutationParentFitness.empty()) {
      LOG(INFO) << paddedStrCat(w, "  numCrossBetter: ", numCrossoverBetter)
                << paddedStrCat(w, "| numCrossWorse: ", numCrossoverWorse)
                << paddedStrCat(w, "| numMutBetter: ", numMutationBetter)
                << paddedStrCat(w, "| numMutWorse: ", numMutationWorse);
    }
  }
};

/* /// Generation results created by aggregating all instance's statistics. */
/* template <typename T, class RNG> */
/* GenerationResults */
/* generationResults(const std::vector<Statistics<T, RNG>> &allStatistics); */

} // namespace stats

#endif // !COMPNAT_TP1_STATISTICS_HPP
