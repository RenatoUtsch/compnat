/*
 * Copyright 2017 Renato Utsch
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef COMPNAT_TP1_STATISTICS_HPP
#define COMPNAT_TP1_STATISTICS_HPP

#include <cmath>
#include <string>
#include <unordered_set>
#include <vector>

#include <glog/logging.h>

#include "representation.hpp"

namespace stats {

/**
 * Calculates the fitness of an individual given a set of input data.
 * This is implemented as the Root-mean-square deviation.
 * @param individual The individual used when calculating the fitness.
 * @param size The size of the individual.
 * @param maxElements Maximum number of elements in the tree.
 * @param bloatFactor Multiplier to control bloating.
 * @param dataset Dataset to use to calculate the fitness.
 * @return A pair of the fitness and the RMSE.
 */
template <typename T, class RNG>
std::pair<double, double> fitness(const Node<T, RNG> &individual, size_t size,
                                  size_t maxElements, double bloatFactor,
                                  const Dataset<T> &dataset) {
  double error = 0;
  for (const auto &sample : dataset) {
    // Unpack outside the loop because clang on MacOS can't compile it in the
    // loop.
    const auto & [ input, expected ] = sample;
    error += std::pow(individual.eval(input) - expected, 2);
  }

  const double rmse = std::sqrt(error / dataset.size());
  return {rmse + bloatFactor * std::pow((double)size / maxElements, 2), rmse};
}

/**
 * Calculates the fitness for all population and returns it in a vector.
 * This is implemented as the Root-mean-square deviation.
 * @param population The population used when calculating the fitness.
 * @param sizes The size of each individual in the population.
 * @param maxElements The number of elements the trees should have.
 * @param bloatFactor Multiplier to control bloating.
 * @param dataset The dataset used to calculate the fitness.
 * @return Vector of fitness and RMSE.
 */
template <typename T, class RNG>
std::pair<std::vector<double>, std::vector<double>>
fitness(const std::vector<Node<T, RNG>> &population,
        const std::vector<size_t> &sizes, size_t maxElements,
        double bloatFactor, const Dataset<T> &dataset) {

  std::vector<double> results(population.size());
  std::vector<double> rmse(population.size());
  for (size_t i = 0; i < population.size(); ++i) {
    std::tie(results[i], rmse[i]) =
        fitness(population[i], sizes[i], maxElements, bloatFactor, dataset);
  }

  return {results, rmse};
}

/**
 * Calculates the size for all the population.
 */
template <typename T, class RNG>
std::vector<size_t> sizes(const std::vector<Node<T, RNG>> &population) {
  std::vector<size_t> sizes(population.size());
  for (size_t i = 0; i < population.size(); ++i) {
    sizes[i] = population[i].size();
  }

  return sizes;
}

/**
 * Stores the statistics of each generation.
 */
template <typename T, class RNG> struct Statistics {
  /// Sizes of all individuals in the generation.
  std::vector<size_t> sizes;

  /// Fitness of all individuals in the generation.
  std::vector<double> fitness;

  /// RMSE of all individuals in the generation.
  std::vector<double> rmse;

  /// Index of the best individual in the generation.
  size_t best;

  /// Index of the worst individual in the generation.
  size_t worst;

  /// Average fitness of the generation.
  T averageFitness;

  /// Average individual size.
  size_t averageSize;

  /// Number of repeated individuals in the generation.
  size_t numRepeatedIndividuals;

  /// Number of individuals generated by crossover better than the average
  /// parent fitness.
  size_t numBetter;

  /// Number of individuals generated by crossover worse than the average
  /// parent fitness.
  size_t numWorse;

  /// String representation of the best individual.
  std::string bestStr;

  Statistics(const Params<T, RNG> &params,
             const std::vector<Node<T, RNG>> &population,
             const Dataset<T> &dataset, const T averageParentFitness = 0,
             const std::vector<size_t> &crossoverIndices = {})
      : sizes(::stats::sizes(population)), best(0), worst(0), averageFitness(0),
        averageSize(0), numRepeatedIndividuals(0), numBetter(0), numWorse(0) {
    std::tie(fitness, rmse) = ::stats::fitness(
        population, sizes, params.maxElements, params.bloatFactor, dataset);

    calcFitnessStats_();
    calcRepeatedIndividuals_();
    calcAverageSize_();
    calcCrossoverStats_(averageParentFitness, crossoverIndices);

    bestStr = population[best].str();

    LOG(INFO) << "  best fitness: " << fitness[best];
    LOG(INFO) << "  best rmse: " << rmse[best];
    LOG(INFO) << "  worst fitness: " << fitness[worst];
    LOG(INFO) << "  worst rmse: " << rmse[worst];
    LOG(INFO) << "  averageFitness: " << averageFitness;
    LOG(INFO) << "  averageSize: " << averageSize;
    LOG(INFO) << "  numRepeatedIndividuals: " << numRepeatedIndividuals;

    if (!crossoverIndices.empty()) {
      LOG(INFO) << "  numBetter crossover: " << numBetter;
      LOG(INFO) << "  numWorse crossover: " << numWorse;
    }

    LOG(INFO) << "  best individual: " << bestStr;
  }

private:
  /// best, worst, averageFitness.
  void calcFitnessStats_() {
    for (size_t i = 0; i < fitness.size(); ++i) {
      if (fitness[best] > fitness[i]) {
        best = i;
      }
      if (fitness[worst] < fitness[i]) {
        worst = i;
      }
      averageFitness += fitness[i];
    }
    averageFitness /= fitness.size();
  }

  /// numRepeatedIndividuals.
  void calcRepeatedIndividuals_() {
    std::unordered_set<T> set;
    for (const auto &fit : fitness) {
      if (set.count(fit)) {
        ++numRepeatedIndividuals;
      } else {
        set.insert(fit);
      }
    }
  }

  void calcAverageSize_() {
    for (auto size : sizes) {
      averageSize += size;
    }
    averageSize /= sizes.size();
  }

  // numBetter, numWorse.
  void calcCrossoverStats_(T averageParentFitness,
                           const std::vector<size_t> &crossoverIndices) {
    for (const auto i : crossoverIndices) {
      if (fitness[i] < averageParentFitness) {
        ++numBetter;
      } else if (fitness[i] > averageParentFitness) {
        ++numWorse;
      }
    }
  }
};

} // namespace stats

#endif // !COMPNAT_TP1_STATISTICS_HPP
