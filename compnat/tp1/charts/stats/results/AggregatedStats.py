# automatically generated by the FlatBuffers compiler, do not modify

# namespace: results

import flatbuffers

# /// Results aggregated for all generations, aggregated for all instances.
class AggregatedStats(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsAggregatedStats(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AggregatedStats()
        x.Init(buf, n + offset)
        return x

    # AggregatedStats
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// Fitness of the best individual in the generation.
    # AggregatedStats
    def BestFitness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .meanStddev import meanStddev
            obj = meanStddev()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// Size of the best individual in the generation.
    # AggregatedStats
    def BestSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .meanStddev import meanStddev
            obj = meanStddev()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// Fitness of the worst individual in the generation.
    # AggregatedStats
    def WorstFitness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from .meanStddev import meanStddev
            obj = meanStddev()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// Size of the worst individual in the generation.
    # AggregatedStats
    def WorstSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from .meanStddev import meanStddev
            obj = meanStddev()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// Average fitness in the generation.
    # AggregatedStats
    def AvgFitness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = o + self._tab.Pos
            from .meanStddev import meanStddev
            obj = meanStddev()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// Average individual size in the generation.
    # AggregatedStats
    def AvgSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = o + self._tab.Pos
            from .meanStddev import meanStddev
            obj = meanStddev()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// Number of repeated individuals in the generation.
    # AggregatedStats
    def NumRepeated(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = o + self._tab.Pos
            from .meanStddev import meanStddev
            obj = meanStddev()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// Number of individuals generated by crossover better than their parents.
# /// < 0 if the data is not available.
    # AggregatedStats
    def NumCrossBetter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = o + self._tab.Pos
            from .meanStddev import meanStddev
            obj = meanStddev()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// Number of individuals generated by crossover worse than their parents.
# /// < 0 if the data is not available.
    # AggregatedStats
    def NumCrossWorse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = o + self._tab.Pos
            from .meanStddev import meanStddev
            obj = meanStddev()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// Number of individuals generated by mutation better than their parents.
# /// < 0 if the data is not available.
    # AggregatedStats
    def NumMutBetter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = o + self._tab.Pos
            from .meanStddev import meanStddev
            obj = meanStddev()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// Number of individuals generated by mutation worse than their parents.
# /// < 0 if the data is not available.
    # AggregatedStats
    def NumMutWorse(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = o + self._tab.Pos
            from .meanStddev import meanStddev
            obj = meanStddev()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// Best individual in the generation, across all instances.
    # AggregatedStats
    def BestIndividualStr(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return ""

# /// Exact fitness of the best individual across all instances.
    # AggregatedStats
    def BestIndividualFitness(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

# /// Exact size of the best individual across all instances.
    # AggregatedStats
    def BestIndividualSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def AggregatedStatsStart(builder): builder.StartObject(14)
def AggregatedStatsAddBestFitness(builder, bestFitness): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(bestFitness), 0)
def AggregatedStatsAddBestSize(builder, bestSize): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bestSize), 0)
def AggregatedStatsAddWorstFitness(builder, worstFitness): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(worstFitness), 0)
def AggregatedStatsAddWorstSize(builder, worstSize): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(worstSize), 0)
def AggregatedStatsAddAvgFitness(builder, avgFitness): builder.PrependStructSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(avgFitness), 0)
def AggregatedStatsAddAvgSize(builder, avgSize): builder.PrependStructSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(avgSize), 0)
def AggregatedStatsAddNumRepeated(builder, numRepeated): builder.PrependStructSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(numRepeated), 0)
def AggregatedStatsAddNumCrossBetter(builder, numCrossBetter): builder.PrependStructSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(numCrossBetter), 0)
def AggregatedStatsAddNumCrossWorse(builder, numCrossWorse): builder.PrependStructSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(numCrossWorse), 0)
def AggregatedStatsAddNumMutBetter(builder, numMutBetter): builder.PrependStructSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(numMutBetter), 0)
def AggregatedStatsAddNumMutWorse(builder, numMutWorse): builder.PrependStructSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(numMutWorse), 0)
def AggregatedStatsAddBestIndividualStr(builder, bestIndividualStr): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(bestIndividualStr), 0)
def AggregatedStatsAddBestIndividualFitness(builder, bestIndividualFitness): builder.PrependFloat64Slot(12, bestIndividualFitness, 0.0)
def AggregatedStatsAddBestIndividualSize(builder, bestIndividualSize): builder.PrependUint32Slot(13, bestIndividualSize, 0)
def AggregatedStatsEnd(builder): return builder.EndObject()
