# automatically generated by the FlatBuffers compiler, do not modify

# namespace: results

import flatbuffers

# /// All results of the given execution.
class Results(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsResults(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Results()
        x.Init(buf, n + offset)
        return x

    # Results
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// Parameters used during execution.
    # Results
    def Params(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Params import Params
            obj = Params()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

# /// Aggregated results for each generation for the training dataset.
    # Results
    def TrainStats(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .AggregatedStats import AggregatedStats
            obj = AggregatedStats()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Results
    def TrainStatsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// Aggregated results for each generation for the test dataset. This may
# /// or may not be available depending on the alwaysTest param.
    # Results
    def TestStats(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .AggregatedStats import AggregatedStats
            obj = AggregatedStats()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Results
    def TestStatsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// Aggregated results for the final generation for the test dataset.
    # Results
    def FinalStats(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .AggregatedStats import AggregatedStats
            obj = AggregatedStats()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ResultsStart(builder): builder.StartObject(4)
def ResultsAddParams(builder, params): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(params), 0)
def ResultsAddTrainStats(builder, trainStats): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(trainStats), 0)
def ResultsStartTrainStatsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ResultsAddTestStats(builder, testStats): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(testStats), 0)
def ResultsStartTestStatsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ResultsAddFinalStats(builder, finalStats): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(finalStats), 0)
def ResultsEnd(builder): return builder.EndObject()
