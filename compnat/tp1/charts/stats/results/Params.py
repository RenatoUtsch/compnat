# automatically generated by the FlatBuffers compiler, do not modify

# namespace: results

import flatbuffers

# /// Parameters used during execution by all instances.
class Params(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsParams(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Params()
        x.Init(buf, n + offset)
        return x

    # Params
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

# /// Global seed used to seed the instances.
    # Params
    def Seed(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

# /// Number of instances.
    # Params
    def NumInstances(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

# /// Number of generations.
    # Params
    def NumGenerations(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

# /// Population size.
    # Params
    def PopulationSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

# /// Tournament size.
    # Params
    def TournamentSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

# /// Maximum tree height.
    # Params
    def MaxHeight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

# /// Crossover probability.
    # Params
    def CrossoverProb(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

# /// If using elitism.
    # Params
    def Elitism(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

# /// If always testing on each generation.
    # Params
    def AlwaysTest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos)
        return 0

def ParamsStart(builder): builder.StartObject(9)
def ParamsAddSeed(builder, seed): builder.PrependUint32Slot(0, seed, 0)
def ParamsAddNumInstances(builder, numInstances): builder.PrependUint32Slot(1, numInstances, 0)
def ParamsAddNumGenerations(builder, numGenerations): builder.PrependUint32Slot(2, numGenerations, 0)
def ParamsAddPopulationSize(builder, populationSize): builder.PrependUint32Slot(3, populationSize, 0)
def ParamsAddTournamentSize(builder, tournamentSize): builder.PrependUint32Slot(4, tournamentSize, 0)
def ParamsAddMaxHeight(builder, maxHeight): builder.PrependUint32Slot(5, maxHeight, 0)
def ParamsAddCrossoverProb(builder, crossoverProb): builder.PrependFloat64Slot(6, crossoverProb, 0.0)
def ParamsAddElitism(builder, elitism): builder.PrependBoolSlot(7, elitism, 0)
def ParamsAddAlwaysTest(builder, alwaysTest): builder.PrependBoolSlot(8, alwaysTest, 0)
def ParamsEnd(builder): return builder.EndObject()
